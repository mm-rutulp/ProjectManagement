@model ProjectManagement.ViewModels.ProjectWorklogViewModel
@using Microsoft.AspNetCore.Identity
@using ProjectManagement.Models
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "Project Worklogs";
    var currentUser = await UserManager.GetUserAsync(User);
    var isAdmin = User.IsInRole("Admin");

    
    <div id="antiForgeryTokenHolder" style="display:none;">
        @Html.AntiForgeryToken()
    </div>
}
@if (TempData["UnauthorizedMessage"] != null)
{
    <div id="unauthorizedMessage"   style="background-color: #f8d7da; color: #721c24;padding: 10px 15px;margin-bottom: 15px;border-radius: 4px;border: 1px solid #f5c6cb;font-weight: 600;">
        @TempData["UnauthorizedMessage"]
    </div>
}


<div class="page-header d-flex justify-content-between align-items-center">
    <h1>@Model.ProjectName - Worklogs</h1>
    <a asp-controller="Project" asp-action="Details" asp-route-id="@Model.ProjectId" class="btn btn-secondary">
        <i class="bi bi-arrow-left"></i> Back to Project
    </a>
</div>

<div class="card mb-4">
    <div class="card-header text-white">
        <h5 class="mb-0">Filter Worklogs</h5>
    </div>
    <div class="card-body">
        <div class="row align-items-end">
            <!-- Filter Form (Left side) -->
            <form class="row col-md-10 g-3" id="filterForm" method="get" action="@Url.Action("YourFilterAction", "Worklog")">
                <input type="hidden" name="id" value="@Model.ProjectId" />

                <div class="col-md-3">
                    <label class="form-label">Team Member</label>
                    <select name="userId" class="form-select">
                        <option value="">Team Members</option>
                        @foreach (var member in Model.ProjectMembers)
                        {
                            <option value="@member.Id" selected="@(Model.UserId == member.Id)">
                                @member.FullName
                            </option>
                        }
                    </select>
                </div>

                <div class="col-md-3">
                    <label class="form-label">Start Date</label>
                    <input type="date" name="startDate" class="form-control" value="@(Model.StartDate?.ToString("yyyy-MM-dd"))" />
                </div>

                <div class="col-md-3">
                    <label class="form-label">End Date</label>
                    <input type="date" name="endDate" class="form-control" value="@(Model.EndDate?.ToString("yyyy-MM-dd"))" />
                </div>

                <div class="col-md-3 d-flex gap-2 align-items-end">
                    <button type="submit" class="btn btn-primary px-3 py-2">
                        <i class="bi bi-filter fs-5"></i>
                    </button>
                    <button type="button" class="btn btn-light border px-3 py-2" style="background-color: #f5f5f5;" onclick="clearFilterForm()">
                        <i class="bi bi-x-circle fs-5 text-danger"></i>
                    </button>

                </div>
            </form>

            <!-- Export Form (Right side) -->
            <form class="ms-auto mt-4" method="get" action="@Url.Action("DownloadWorklogsExcel", "Worklog")" id="downloadForm" style="max-width: 100px;">
                <input type="hidden" name="id" value="@Model.ProjectId" />
                <input type="hidden" name="userId" />
                <input type="hidden" name="startDate" />
                <input type="hidden" name="endDate" />
                <button type="submit" class="btn btn-outline-primary px-2 py-2 w-100">
                    <i class="bi bi-filetype-xls fs-5"></i>
                </button>
            </form>
        </div>
    </div>

</div>


<!-- Worklogs Table -->
<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Worklog Entries</h5>
        @if (!isAdmin)
        {
            <div class="btn-group">
               <!-- <a asp-action="Create" asp-route-id="@Model.ProjectId" class="btn btn-primary">
                     <i class="bi bi-plus-circle"></i> Add Worklog
                 </a>-->
                <a asp-action="CreateBulk" asp-route-id="@Model.ProjectId" class="btn btn-primary">
                    <i class="bi bi-layers"></i> Add Worklogs
                </a>
            </div>
        }
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table w-100">
                <thead>
                    <tr >
                        <th ></th> <!-- New arrow column -->
                        <th>Date</th>
                        <th>Team Members</th>
                        <th>Hours</th>
                        @if (!isAdmin)
                        {
                            <th style="width: 80px;">Action</th>
                        }
                       
                    </tr>
                </thead>
                <tbody id="worklogTableBody">
                    <!-- Worklogs will be loaded here via AJAX -->
                </tbody>
            </table>

        </div>
    </div>
</div>

<div id="pagination" class="mt-3 text-center"></div>

<!-- JavaScript -->
@section Scripts {
    <script>
        const isAdmin = @(isAdmin.ToString().ToLower());
        const antiForgeryToken = $('#antiForgeryTokenHolder input[name="__RequestVerificationToken"]').val();
        const currentUserId = '@currentUser.Id';
        const projectId = @Model.ProjectId;
        let currentPage = 1;
        const pageSize = 10;

   

        function renderPagination(totalCount, currentPage, pageSize) {
            const totalPages = Math.ceil(totalCount / pageSize);
            const container = $('#pagination');
            container.empty();

            for (let i = 1; i <= totalPages; i++) {
                const button = $(`<button class="btn btn-sm ${i === currentPage ? 'btn-primary' : 'btn-outline-primary'} mx-1">${i}</button>`);
                button.click(() => loadWorklogs(i));
                container.append(button);
            }
        }
            
        document.addEventListener("DOMContentLoaded", function () {
            const filterForm = document.getElementById("filterForm");
            const downloadForm = document.getElementById("downloadForm");

            downloadForm.addEventListener("submit", function () {
                const userId = filterForm.querySelector('[name="userId"]').value;
                const startDate = filterForm.querySelector('[name="startDate"]').value;
                const endDate = filterForm.querySelector('[name="endDate"]').value;

                downloadForm.querySelector('[name="userId"]').value = userId;
                downloadForm.querySelector('[name="startDate"]').value = startDate;
                downloadForm.querySelector('[name="endDate"]').value = endDate;
            });
        });
   

         
        function toggleDetails(rowId, userName, date) {
            const row = $(`#${rowId}`);
            const body = row.find('.detail-body');

            if (row.is(':visible')) {
                row.hide();
            } else {
                row.show();
                
                if (body.children().length === 1 && body.text().includes('Loading')) {
                    $.ajax({
                        url: '/Worklog/GetWorklogDetails',
                        method: 'GET',
                        data: {
                            projectId: projectId,
                            userName: userName,
                            date: date
                        },
                        success: function (details) {
                            body.empty();
                            if (details.length === 0) {
                                body.append('<tr><td colspan="3" class="text-center text-muted">No details found.</td></tr>');
                            } else {
                                        details.forEach(log => {
                                        body.append(`
                                            <tr>
                                              
                                               
                                                <td>${log.taskType}</td>
                                                <td>${log.description}</td>
                                                 <td>${log.status}</td> 
                                                <td>${log.hoursWorked}</td>


                                                       ${!isAdmin ? `
                                                            <td>
                                                              
                                                                <form action="/Worklog/Delete/${log.worklogId}" method="post" class="d-inline" onsubmit="return confirm('Are you sure you want to delete this worklog?');">
                                                                    <input name="__RequestVerificationToken" type="hidden" value="${antiForgeryToken}" />
                                                                    <button type="submit" class="btn btn-sm btn-outline-danger">
                                                                        <i class="bi bi-trash"></i>
                                                                    </button>
                                                                </form>
                                                            </td>
                                                        ` : '<td></td>'}
                                            </tr>
                                        `);
                                    });
                            }
                        },
                        error: function () {
                            body.html('<tr><td colspan="3" class="text-danger text-center">Failed to load details.</td></tr>');
                        }
                    });
                }
            }
        }

        $('#worklogTableBody').on('click', '.meta-row', function (e) {
            if ($(e.target).closest('button').length > 0) return;

            const toggleId = $(this).data('toggle-id');
            const detailRow = $(`#${toggleId}`);

            // Extract userName and date from row content
            const userName = $(this).find('td').eq(2).text().trim(); // 3rd column
            const dateText = $(this).find('td').eq(1).text().trim(); // 2nd column
            const [day, month, year] = dateText.split('/');
            const date = `${year}-${month}-${day}`; // Convert to yyyy-MM-dd format

            toggleDetails(toggleId, userName, date);

            $(this).find('i.bi').toggleClass('bi-chevron-down bi-chevron-up');
        });



         function formatDateToDDMMYYYY(dateString) {
            const date = new Date(dateString);
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const year = date.getFullYear();
            return `${day}/${month}/${year}`;
        }
            
        
        
            document.addEventListener("DOMContentLoaded", function () {
            const filterForm = document.getElementById("filterForm");
            const downloadForm = document.getElementById("downloadForm");

            downloadForm.addEventListener("submit", function () {
                const userId = filterForm.querySelector('[name="userId"]').value;
                const startDate = filterForm.querySelector('[name="startDate"]').value;
                const endDate = filterForm.querySelector('[name="endDate"]').value;

                downloadForm.querySelector('[name="userId"]').value = userId;
                downloadForm.querySelector('[name="startDate"]').value = startDate;
                downloadForm.querySelector('[name="endDate"]').value = endDate;
            });
        });

         setTimeout(() => {
            const msg = document.getElementById('unauthorizedMessage');
            if (msg) {
                msg.style.opacity = '0'; 
                
                setTimeout(() => {
                    msg.remove();
                }, 500);
            }
        }, 1000);

        function loadWorklogs(page = 1) {
            currentPage = page;

            $.ajax({
                url: '/Worklog/GetWorklogs',
                method: 'GET',
                data: {
                    id: projectId,
                    userId: $('select[name="userId"]').val(),
                    startDate: $('input[name="startDate"]').val(),
                    endDate: $('input[name="endDate"]').val(),
                    page: page,
                    pageSize: pageSize
                },
                success: function (response) {
                    const data = response.data;
              
                    const tbody = $('#worklogTableBody');
                    tbody.empty();

                    if (data.length === 0) {
                        // Adjust colspan: arrow column + 3 columns + (Actions column if !isAdmin)
                        const colspan = isAdmin ? 4 : 5;
                        tbody.append(`<tr><td colspan="${colspan}" class="text-center">No worklogs found.</td></tr>`);
                        return;
                    }
                    data.forEach(function (log, index) {
                        const rowId = `row-${index}`;
                        const toggleId = `toggle-${index}`;
                        const formattedDate = formatDateToDDMMYYYY(log.date);
                        
                        // Calculate colspan for detail row
                        const colspan = isAdmin ? 4 : 5;

                        const row = `
                             <tr data-index="${index}" id="${rowId}" class="meta-row" data-toggle-id="${toggleId} ">
                                <td style="width: 40px; text-align: center; cursor: pointer;">
                                    <button class="btn btn-sm btn-link p-0" onclick="toggleDetails('${toggleId}', '${log.userFullName}', '${log.date}')">
                                        <i class="bi bi-chevron-down"></i>
                                    </button>
                                </td>
                                <td>${formattedDate}</td>
                                <td>${log.userFullName}</td>
                                <td>${log.totalHours}</td>



                         ${!isAdmin  ?
                             `<td>
                                    <a href="/Worklog/EditBulkWorklogs?projectId=${projectId}&userId=${log.userId}&date=${log.date}"
                                       class="btn btn-sm btn-outline-primary">
                                        <i class="bi bi-pencil"></i>
                                    </a>
                             </td>` : ''}
                            </tr>
                            <tr id="${toggleId}" class="detail-row" style="display: none;">
                                <td colspan="${colspan}">
                                    <div class="table-responsive">
                                        <table class="table table-bordered table-sm mb-0">
                                                   <thead>
                                                    <tr>
                                                        
                                                        <th>Task Type</th>
                                                        <th>Description</th>
                                                        <th>Status</th>
                                                        <th>Hours</th>
                                                        @if (!isAdmin)
                                                        {
                                                             <th>Actions</th>
                                                        }
                                                    </tr>
                                                </thead>
                                            <tbody class="detail-body">
                                                <tr><td colspan="5" class="text-center">Loading...</td></tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </td>
                            </tr>`;

                        tbody.append(row);
                    });

                    renderPagination(response.totalCount, page, pageSize);
                },
                error: function () {
                    const colspan = isAdmin ? 4 : 5;
                    $('#worklogTableBody').html(`<tr><td colspan="${colspan}" class="text-danger text-center">Failed to load data.</td></tr>`);
                }
            });
        }
             function clearFilterForm() {
            const form = document.getElementById('filterForm');
            form.querySelector('select[name="userId"]').value = '';
            form.querySelector('input[name="startDate"]').value = '';
            form.querySelector('input[name="endDate"]').value = '';
            loadWorklogs(1);

        }

        $(document).ready(function () {
            loadWorklogs();
            $('#filterForm').on('submit', function (e) {
                e.preventDefault();
                loadWorklogs(1);
            });
        });
    </script>
}
