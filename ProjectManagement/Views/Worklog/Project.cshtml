@model ProjectManagement.ViewModels.ProjectWorklogViewModel
@using Microsoft.AspNetCore.Identity
@using ProjectManagement.Models
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "Project Worklogs";
    var currentUser = await UserManager.GetUserAsync(User);
    var isAdmin = User.IsInRole("Admin");
}

<div class="page-header d-flex justify-content-between align-items-center">
    <h1>@Model.ProjectName - Worklogs</h1>
    <a asp-controller="Project" asp-action="Details" asp-route-id="@Model.ProjectId" class="btn btn-secondary">
        <i class="bi bi-arrow-left"></i> Back to Project
    </a>
</div>

<div class="card mb-4">
    <div class="card-header">
        <h5 class="mb-0">Filter Worklogs</h5>
    </div>
    <div class="card-body">
        <form  class="row g-3" id="filterForm">
            <input type="hidden" name="id" value="@Model.ProjectId" />
            
            <div class="col-md-4">
                <label class="form-label">Team Member</label>
                <select name="userId" class="form-select">
                    <option value="">All Team Members</option>
                    @foreach (var member in Model.ProjectMembers)
                    {
                        <option value="@member.Id" selected="@(Model.UserId == member.Id)">@member.FullName</option>
                    }
                </select>
            </div>
            
            <div class="col-md-3">
                <label class="form-label">Start Date</label>
                <input type="date" name="startDate" class="form-control" value="@(Model.StartDate?.ToString("yyyy-MM-dd"))" />
            </div>
            
            <div class="col-md-3">
                <label class="form-label">End Date</label>
                <input type="date" name="endDate" class="form-control" value="@(Model.EndDate?.ToString("yyyy-MM-dd"))" />
            </div>
            
            <div class="col-md-2 d-flex align-items-end">
                <button type="submit" class="btn btn-primary w-100">
                    <i class="bi bi-search"></i> Filter
                </button>
            </div>
        </form>
    </div>
</div>


<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Worklog Entries</h5>
        <a asp-action="Create" asp-route-id="@Model.ProjectId" class="btn btn-primary">
            <i class="bi bi-plus-circle"></i> Add Worklog
        </a>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Team Member</th>
                        <th>Hours</th>
                        <th>Task Type</th>
                        <th>Description</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="worklogTableBody">
                    <!-- Worklogs will be loaded here via AJAX -->
                </tbody>
            </table>
        </div>
    </div>
</div>
<div id="pagination" class="mt-3 text-center"></div>

@section Scripts {
    <script>
        // Define loadWorklogs in the global scope so it's accessible from anywhere
               let currentPage = 1;
        const pageSize = 10;
          var projectId = @Model.ProjectId;
        function loadWorklogs(page = 1) {
            currentPage = page;

            $.ajax({
                url: '/Worklog/GetWorklogs',
                method: 'GET',
                data: {
                    id: projectId,
                    userId: $('select[name="userId"]').val(),
                    startDate: $('input[name="startDate"]').val(),
                    endDate: $('input[name="endDate"]').val(),
                    page: page,
                    pageSize: pageSize
                },
                success: function (response) {
                    const data = response.data;
                    const tbody = $('#worklogTableBody');
                    tbody.empty();

                    if (data.length === 0) {
                        tbody.append('<tr><td colspan="6" class="text-center">No worklogs found.</td></tr>');
                    }

                    data.forEach(function (log) {
                        const row = `
                            <tr>
                                <td>${new Date(log.date).toLocaleDateString('en-US')}</td>
                                <td>${log.userFullName}</td>
                                <td>${log.hoursWorked}</td>
                                <td>${log.taskType}</td>
                                <td>${log.description}</td>
                                <td>
                                    <div class="btn-group">
                                        <a href="/Worklog/Edit/${log.id}" class="btn btn-sm btn-outline-primary">
                                            <i class="bi bi-pencil"></i>
                                        </a>
                                        <a href="/Worklog/Delete/${log.id}" class="btn btn-sm btn-outline-danger">
                                            <i class="bi bi-trash"></i>
                                        </a>
                                    </div>
                                </td>
                            </tr>`;
                        tbody.append(row);
                    });

                    renderPagination(response.totalCount, page, pageSize);
                },
                error: function () {
                    $('#worklogTableBody').html('<tr><td colspan="6" class="text-danger text-center">Failed to load data.</td></tr>');
                }
            });
        }

        function renderPagination(totalCount, currentPage, pageSize) {
            const totalPages = Math.ceil(totalCount / pageSize);
            const container = $('#pagination');
            container.empty();

            for (let i = 1; i <= totalPages; i++) {
                const button = $(`<button class="btn btn-sm ${i === currentPage ? 'btn-primary' : 'btn-outline-primary'} mx-1">${i}</button>`);
                button.click(() => loadWorklogs(i));
                container.append(button);
            }
        }

        $('#filterForm').on('submit', function (e) {
            e.preventDefault();
            loadWorklogs(1); // reset to page 1 on filter
        });

        $(document).ready(function () {
            loadWorklogs(); // Initial load on page load

            // Hook the filter form submit event
            $('#filterForm').on('submit', function (e) {
                e.preventDefault();
                loadWorklogs(); // Call the globally defined function
            });
        });
    </script>
}

